using Library.Models;

namespace Library.Controllers;
public partial class ControllersExtentions
{
    public static WebApplication MapOwnerController(this WebApplication app)
    {
        var groupName = "Owners";

        app.MapGet("/api/owners", GetAllOwnersAsync)
            .WithTags(groupName)
            .WithSummary(nameof(GetAllOwnersAsync))
            .WithDescription(
            """
            Retrieves a list of all registered owners in the system. This endpoint is primarily for administrative or development use 
            and returns the public details of each owner.
            """
            ).Produces<Owner[]>(200);

        app.MapGet("/api/owners/{id}", GetOwnerByIdAsync)
            .WithTags(groupName)
            .WithSummary(nameof(GetOwnerByIdAsync))
            .WithDescription(
            """
            Fetches the details of a specific owner using their internal, numerical ID. This can be used to retrieve profile information.
            """
            ).Produces<Owner>(200).Produces(204).ProducesProblem(400);

        app.MapPost("/api/owners", PostOwnerAsync)
            .WithTags(groupName)
            .WithSummary(nameof(PostOwnerAsync))
            .WithDescription(
            """
            Creates a new owner account. This is the 'Sign Up' endpoint. The request body should contain the owner's name, email, and password.
            A unique `route_token` will be generated by the server.
            """
            ).Produces<Owner>(201).ProducesProblem(400);

        app.MapPut("/api/owners/{id}", PutOwnerAsync)
            .WithTags(groupName)
            .WithSummary(nameof(PutOwnerAsync))
            .WithDescription(
            """
            Updates the details of an existing owner, identified by their internal ID. This endpoint supports partial updates, allowing for changes to the name and/or password.
            """
            ).Produces<Owner>(200).Produces(204).ProducesProblem(400);

        app.MapGet("/{routeToken}", GetOwnerByRouteTokenAsync)
            .WithTags(groupName)
            .WithSummary(nameof(GetOwnerByRouteTokenAsync))
            .WithDescription(
            """
            Retrieves owner details using their public-facing unique route token.
            """
            ).Produces<Owner>(200).Produces(204).ProducesProblem(400);

        app.MapDelete("/api/owners/{id}", DeleteOwnerAsync)
            .WithTags(groupName)
            .WithSummary(nameof(DeleteOwnerAsync))
            .WithDescription(
            """
            Deletes an owner's account from the system using their internal ID. This action is irreversible and will likely remove all associated schedule data.
            """
            ).Produces<Owner>(200).Produces(204).ProducesProblem(400);

        return app;
    }
}