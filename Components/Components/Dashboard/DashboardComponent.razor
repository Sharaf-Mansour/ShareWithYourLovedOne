@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
<div class="bg-gray-800 rounded-2xl shadow-xl w-full max-w-7xl h-[90vh] flex overflow-hidden">

    <div class="w-1/3 bg-gray-900/50 p-6 border-r border-gray-700 flex flex-col justify-between">
        <div>
            <h2 class="text-3xl font-bold text-white mb-6">@LoggedInOwner.Name</h2>

            <button @onclick="ShowAddEntryForm" class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold text-lg py-3 rounded-lg transition mb-6">
                + Add New Entry
            </button>

        </div>
    </div>

    <div class="w-2/3 flex flex-col">
        <div class="p-6 flex justify-between items-center">
            <h2 class="text-3xl font-bold text-white">Your Schedule</h2>

            <button @onclick="HandleShareLinkAsync" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg transition flex items-center gap-2">
                Share Link 🔗
            </button>
        </div>
        <div class="flex-grow p-6 pt-0 overflow-y-auto">
            @if (scheduleEntries.Count > 0)
            {
                <div class="space-y-3">
                    @foreach (var entry in scheduleEntries)
                    {
                        <ViewEnteryComponent Entry="entry" OnDelete="HandleDeleteAsync" OnEdit="ShowEditEntryForm" />
                    }
                </div>
            }
            else
            {
                <p class="text-gray-500 text-center py-10">You have no schedule entries. Add one to get started.</p>
            }
        </div>
    </div>
</div>

@if (isEntryFormVisible)
{
    <ScheduleEntryForm EntryToEdit="currentEntryInForm"
        OnSave="HandleEntrySaveAsync"
        OnCancel="HideEntryForm"
        FormTitle="@(currentEntryInForm.ID == 0 ? "Add New Entry" : "Edit Schedule Entry")" />
}
@code
{
    [Parameter, EditorRequired]
    public Owner LoggedInOwner { get; set; } = new();
    private List<ScheduleEntry> scheduleEntries = [];
    protected override async Task OnInitializedAsync() => await LoadScheduleEntries();
    private async  Task LoadScheduleEntries()
    {
        scheduleEntries = (await ScheduleEntryService.RetrieveAllScheduleEntriesForOwnerAsync(LoggedInOwner.ID)).ToList();
    }

    //new part
    private bool isEntryFormVisible = false;

    private ScheduleEntry currentEntryInForm = new();

    private void ShowAddEntryForm()
    {
        var now = DateTime.Now;
        currentEntryInForm = new()
        {
        StartDateTime = now,
        EndDateTime = now.AddHours(1)
        };
        isEntryFormVisible = true;
    }

    private void HideEntryForm()
    {
        isEntryFormVisible = false;
    }

    private async Task HandleEntrySaveAsync(ScheduleEntry EntryToSave)
    {
        if (EntryToSave.ID == 0)
        {
            EntryToSave.OwnerID = LoggedInOwner.ID;
            await ScheduleEntryService.AddScheduleEntryAsync(EntryToSave);
        }
        else
        {
            await ScheduleEntryService.ModifyScheduleEntryAsync(EntryToSave);    
        }

        isEntryFormVisible = false;
        await LoadScheduleEntries();
    }

    private async Task HandleDeleteAsync(int EntryIdToDelete)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delted this entry?");
        if (confirmed)
        {
            await ScheduleEntryService.RemoveScheduleEntryByIdAsync(EntryIdToDelete);
            await LoadScheduleEntries();
        }
    }

    private void ShowEditEntryForm(ScheduleEntry entryfromchild)
    {
        currentEntryInForm = entryfromchild;
        isEntryFormVisible = true;
    }
    private async Task HandleShareLinkAsync()
    {
        try
        {
            var apiUrl = $"{NavManager.BaseUri}{LoggedInOwner.RouteToken}";
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", apiUrl);
            await JSRuntime.InvokeVoidAsync("alert", "share link copied to clipboard!");
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating share link: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error: Could not generate share link.");
        }    

    }
}
