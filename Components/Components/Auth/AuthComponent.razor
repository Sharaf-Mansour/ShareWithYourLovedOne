<PageTitle>Home</PageTitle>
<div class="bg-gray-800 p-8 rounded-2xl shadow-xl w-full max-w-md">
    @if (notify)
    {
        <div class="absolute top-0 left-0 right-0 bg-green-600 text-white text-center py-3 animate-fade-in-down">
            @* Changes Saved Successfully! *@
            @notfiMessg
        </div>
    }
    <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-white">@(toggel ? "Welcome Back" : "Create an Account")</h1>
        <p class="text-gray-400 mt-2">@(toggel ? "Log in to manage your schedule." : "Get started by creating a account.")</p>
    </div>

     <div class="flex gap-4 mb-6">
        <button @onclick="() => toggel = true" class="flex-1 p-2 rounded-lg font-semibold transition @(toggel ? "bg-cyan-600 text-white" : "bg-gray-700 hover:bg-gray-600 text-gray-300")">
                        Login
        </button>
        <button @onclick="() => toggel = false" class="flex-1 p-2 rounded-lg font-semibold transition @(!toggel ? "bg-cyan-600 text-white" : "bg-gray-700 hover:bg-gray-600 text-gray-300")">
                        Sign Up
        </button>
     </div>

    @if (toggel)
    {
        <LoginComponent OnLoginSuccess="HandleAuthSuccess" />
    }
    else
    {
        <SignupComponent OnSignupSuccess="HandleSignupSuccess" />
    }
</div>
@code {
    [Parameter]
    public EventCallback<int> OnAuthSuccess { get; set; }
    private bool toggel = true;
    private bool notify = false;
    private string? notfiMessg;

    private async Task HandleAuthSuccess(int ownerId) => await OnAuthSuccess.InvokeAsync(ownerId);
    private async void HandleSignupSuccess() {
        toggel = true;
        await sendNotify("Signed up successfully login to continue");
    }

    private async Task sendNotify(string notifystr)
    {
        notify = false;
        notfiMessg = notifystr;
        notify = true;
        StateHasChanged();
        await Task.Delay(3000);
        notify = false;
        StateHasChanged();
    }
}
